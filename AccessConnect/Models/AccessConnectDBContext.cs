// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AccessConnect.Models;

public partial class AccessConnectDBContext : DbContext
{
    public AccessConnectDBContext(DbContextOptions<AccessConnectDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Amenidade> Amenidades { get; set; }

    public virtual DbSet<Comentario> Comentarios { get; set; }

    public virtual DbSet<ComprobantesDePago> ComprobantesDePagos { get; set; }

    public virtual DbSet<Comunicado> Comunicados { get; set; }

    public virtual DbSet<Domicilio> Domicilios { get; set; }

    public virtual DbSet<Encuesta> Encuestas { get; set; }

    public virtual DbSet<EstadoDeCuentum> EstadoDeCuenta { get; set; }

    public virtual DbSet<Evento> Eventos { get; set; }

    public virtual DbSet<Incidente> Incidentes { get; set; }

    public virtual DbSet<Invitacione> Invitaciones { get; set; }

    public virtual DbSet<Invitado> Invitados { get; set; }

    public virtual DbSet<ListaNegraDeVehiculo> ListaNegraDeVehiculos { get; set; }

    public virtual DbSet<Mantenimiento> Mantenimientos { get; set; }

    public virtual DbSet<Mascota> Mascotas { get; set; }

    public virtual DbSet<MensajesDeEmergencium> MensajesDeEmergencia { get; set; }

    public virtual DbSet<MensajesDelChatConCasetum> MensajesDelChatConCaseta { get; set; }

    public virtual DbSet<OpcionesDeRespuestum> OpcionesDeRespuesta { get; set; }

    public virtual DbSet<Pago> Pagos { get; set; }

    public virtual DbSet<Publicacione> Publicaciones { get; set; }

    public virtual DbSet<RecorridosDeSeguridad> RecorridosDeSeguridads { get; set; }

    public virtual DbSet<RegistroDeVoto> RegistroDeVotos { get; set; }

    public virtual DbSet<Reglamento> Reglamentos { get; set; }

    public virtual DbSet<ReservasDeAmenidade> ReservasDeAmenidades { get; set; }

    public virtual DbSet<ServiciosProgramado> ServiciosProgramados { get; set; }

    public virtual DbSet<Transaccione> Transacciones { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<UsuariosDomicilio> UsuariosDomicilios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Amenidade>(entity =>
        {
            entity.HasKey(e => e.IdDeAmenidad);

            entity.Property(e => e.IdDeAmenidad).HasColumnName("ID_de_Amenidad");
            entity.Property(e => e.CapacidadMaximaDePersonas).HasColumnName("Capacidad_maxima_de_personas");
            entity.Property(e => e.DescripcionDeLaAmenidad)
                .HasColumnType("text")
                .HasColumnName("Descripcion_de_la_Amenidad");
            entity.Property(e => e.Disponibilidad)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EstadoDeLaAmenidad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_de_la_Amenidad");
            entity.Property(e => e.NombreDeLaAmenidad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nombre_de_la_amenidad");
        });

        modelBuilder.Entity<Comentario>(entity =>
        {
            entity.HasKey(e => e.IdDeComentario);

            entity.Property(e => e.IdDeComentario).HasColumnName("ID_de_Comentario");
            entity.Property(e => e.ContenidoDelComentario)
                .HasColumnType("text")
                .HasColumnName("Contenido_del_comentario");
            entity.Property(e => e.EstadoDelComentario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Comentario");
            entity.Property(e => e.FechaDeComentario)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_comentario");
            entity.Property(e => e.IdDePublicacion).HasColumnName("ID_de_Publicacion");
            entity.Property(e => e.IdDeUsuarioQueHaceElComentario).HasColumnName("ID_de_Usuario_que_hace_el_comentario");
            entity.Property(e => e.NivelDeModeracion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nivel_de_Moderacion");

            entity.HasOne(d => d.IdDePublicacionNavigation).WithMany(p => p.Comentarios).HasForeignKey(d => d.IdDePublicacion);

            entity.HasOne(d => d.IdDeUsuarioQueHaceElComentarioNavigation).WithMany(p => p.Comentarios).HasForeignKey(d => d.IdDeUsuarioQueHaceElComentario);
        });

        modelBuilder.Entity<ComprobantesDePago>(entity =>
        {
            entity.HasKey(e => e.IdDeComprobante);

            entity.ToTable("Comprobantes_de_Pago");

            entity.Property(e => e.IdDeComprobante).HasColumnName("ID_de_Comprobante");
            entity.Property(e => e.DetallesDelPago)
                .HasColumnType("text")
                .HasColumnName("Detalles_del_Pago");
            entity.Property(e => e.EstadoDeValidacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_de_Validacion");
            entity.Property(e => e.FechaDeEnvioDelComprobante)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Envio_del_Comprobante");
            entity.Property(e => e.FechaDeValidacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Validacion");
            entity.Property(e => e.IdDeUsuarioDeLaMesaDirectivaQueValidaElPago).HasColumnName("ID_de_Usuario_de_la_Mesa_Directiva_que_valida_el_pago");
            entity.Property(e => e.IdDeUsuarioQueRealizaElPago).HasColumnName("ID_de_Usuario_que_realiza_el_pago");
            entity.Property(e => e.ImagenDelComprobante).HasColumnName("Imagen_del_Comprobante");
            entity.Property(e => e.Observaciones).HasColumnType("text");

            entity.HasOne(d => d.IdDeUsuarioDeLaMesaDirectivaQueValidaElPagoNavigation).WithMany(p => p.ComprobantesDePagoIdDeUsuarioDeLaMesaDirectivaQueValidaElPagoNavigations).HasForeignKey(d => d.IdDeUsuarioDeLaMesaDirectivaQueValidaElPago);

            entity.HasOne(d => d.IdDeUsuarioQueRealizaElPagoNavigation).WithMany(p => p.ComprobantesDePagoIdDeUsuarioQueRealizaElPagoNavigations).HasForeignKey(d => d.IdDeUsuarioQueRealizaElPago);
        });

        modelBuilder.Entity<Comunicado>(entity =>
        {
            entity.HasKey(e => e.IdDeComunicado);

            entity.Property(e => e.IdDeComunicado).HasColumnName("ID_de_Comunicado");
            entity.Property(e => e.ContenidoDelComunicado)
                .HasColumnType("text")
                .HasColumnName("Contenido_del_comunicado");
            entity.Property(e => e.EstadoDelComunicado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_comunicado");
            entity.Property(e => e.FechaYHoraDeCreacionDelComunicado)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_creacion_del_comunicado");
            entity.Property(e => e.IdDeAdministradorQueGeneraElComunicado).HasColumnName("ID_de_Administrador_que_genera_el_comunicado");
            entity.Property(e => e.TipoDeComunicado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_comunicado");
            entity.Property(e => e.TituloDelComunicado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Titulo_del_comunicado");

            entity.HasOne(d => d.IdDeAdministradorQueGeneraElComunicadoNavigation).WithMany(p => p.Comunicados).HasForeignKey(d => d.IdDeAdministradorQueGeneraElComunicado);
        });

        modelBuilder.Entity<Domicilio>(entity =>
        {
            entity.HasKey(e => e.IdDeDomicilio);

            entity.Property(e => e.IdDeDomicilio).HasColumnName("ID_de_Domicilio");
            entity.Property(e => e.Calle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ciudad)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Codigo_postal");
            entity.Property(e => e.Colonia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pais)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Encuesta>(entity =>
        {
            entity.HasKey(e => e.IdDeEncuesta);

            entity.Property(e => e.IdDeEncuesta).HasColumnName("ID_de_Encuesta");
            entity.Property(e => e.EstadoDeLaEncuesta)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_de_la_Encuesta");
            entity.Property(e => e.FechaDeCierreDeLaEncuesta)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_cierre_de_la_encuesta");
            entity.Property(e => e.FechaDeCreacionDeLaEncuesta)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_creacion_de_la_encuesta");
            entity.Property(e => e.PreguntaDeLaEncuesta)
                .HasColumnType("text")
                .HasColumnName("Pregunta_de_la_encuesta");
            entity.Property(e => e.ResultadosDeLaEncuesta)
                .HasColumnType("text")
                .HasColumnName("Resultados_de_la_Encuesta");
        });

        modelBuilder.Entity<EstadoDeCuentum>(entity =>
        {
            entity.HasKey(e => e.IdDeEstadoDeCuenta);

            entity.ToTable("Estado_de_Cuenta");

            entity.Property(e => e.IdDeEstadoDeCuenta).HasColumnName("ID_de_Estado_de_Cuenta");
            entity.Property(e => e.DetallesDeAnticipos)
                .HasColumnType("text")
                .HasColumnName("Detalles_de_Anticipos");
            entity.Property(e => e.DetallesDePagos)
                .HasColumnType("text")
                .HasColumnName("Detalles_de_Pagos");
            entity.Property(e => e.DetallesDeRecargos)
                .HasColumnType("text")
                .HasColumnName("Detalles_de_Recargos");
            entity.Property(e => e.FechaDeGeneracionDelEstadoDeCuenta)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Generacion_del_Estado_de_Cuenta");
            entity.Property(e => e.IdDeUsuario).HasColumnName("ID_de_Usuario");
            entity.Property(e => e.SaldoActual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Saldo_Actual");

            entity.HasOne(d => d.IdDeUsuarioNavigation).WithMany(p => p.EstadoDeCuenta).HasForeignKey(d => d.IdDeUsuario);
        });

        modelBuilder.Entity<Evento>(entity =>
        {
            entity.HasKey(e => e.IdDeEvento);

            entity.Property(e => e.IdDeEvento).HasColumnName("ID_de_Evento");
            entity.Property(e => e.ClaveUnicaDelEvento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Clave_Unica_del_Evento");
            entity.Property(e => e.DescripcionDelEvento)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_Evento");
            entity.Property(e => e.FechaDeCreacionDelEvento)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Creacion_del_Evento");
            entity.Property(e => e.FechaYHoraDelEvento)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_Hora_del_Evento");
            entity.Property(e => e.IdDeUsuarioAnfitrion).HasColumnName("ID_de_Usuario_Anfitrion");
            entity.Property(e => e.NombreDelEvento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nombre_del_Evento");

            entity.HasOne(d => d.IdDeUsuarioAnfitrionNavigation).WithMany(p => p.Eventos).HasForeignKey(d => d.IdDeUsuarioAnfitrion);
        });

        modelBuilder.Entity<Incidente>(entity =>
        {
            entity.HasKey(e => e.IdDeIncidente);

            entity.Property(e => e.IdDeIncidente).HasColumnName("ID_de_Incidente");
            entity.Property(e => e.DescripcionDelIncidente)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_incidente");
            entity.Property(e => e.DetallesDeLaMejoraPropuesta)
                .HasColumnType("text")
                .HasColumnName("Detalles_de_la_Mejora_Propuesta");
            entity.Property(e => e.EstadoDelIncidente)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_incidente");
            entity.Property(e => e.FechaDeAtencionDelIncidente)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Atencion_del_Incidente");
            entity.Property(e => e.FechaDeReporteDelIncidente)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_reporte_del_incidente");
            entity.Property(e => e.IdDeUsuarioDeLaMesaDirectivaQueAtiendeElIncidente).HasColumnName("ID_de_Usuario_de_la_Mesa_Directiva_que_atiende_el_incidente");
            entity.Property(e => e.IdDeUsuarioQueReportaElIncidente).HasColumnName("ID_de_Usuario_que_reporta_el_incidente");

            entity.HasOne(d => d.IdDeUsuarioDeLaMesaDirectivaQueAtiendeElIncidenteNavigation).WithMany(p => p.IncidenteIdDeUsuarioDeLaMesaDirectivaQueAtiendeElIncidenteNavigations).HasForeignKey(d => d.IdDeUsuarioDeLaMesaDirectivaQueAtiendeElIncidente);

            entity.HasOne(d => d.IdDeUsuarioQueReportaElIncidenteNavigation).WithMany(p => p.IncidenteIdDeUsuarioQueReportaElIncidenteNavigations).HasForeignKey(d => d.IdDeUsuarioQueReportaElIncidente);
        });

        modelBuilder.Entity<Invitacione>(entity =>
        {
            entity.HasKey(e => e.IdDeInvitacion);

            entity.Property(e => e.IdDeInvitacion).HasColumnName("ID_de_Invitacion");
            entity.Property(e => e.ClaveUnica)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Clave_Unica");
            entity.Property(e => e.EstadoDeLaInvitacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_de_la_Invitacion");
            entity.Property(e => e.FechaDeCreacionDeLaInvitacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Creacion_de_la_Invitacion");
            entity.Property(e => e.IdDeEvento).HasColumnName("ID_de_Evento");
            entity.Property(e => e.IdDeInvitado).HasColumnName("ID_de_Invitado");

            entity.HasOne(d => d.IdDeEventoNavigation).WithMany(p => p.Invitaciones).HasForeignKey(d => d.IdDeEvento);

            entity.HasOne(d => d.IdDeInvitadoNavigation).WithMany(p => p.Invitaciones).HasForeignKey(d => d.IdDeInvitado);
        });

        modelBuilder.Entity<Invitado>(entity =>
        {
            entity.HasKey(e => e.IdDeInvitado);

            entity.Property(e => e.IdDeInvitado).HasColumnName("ID_de_Invitado");
            entity.Property(e => e.Apellido)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CorreoElectronico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Correo_electronico");
            entity.Property(e => e.DescripcionDeLaInvitacion)
                .HasColumnType("text")
                .HasColumnName("Descripcion_de_la_Invitacion");
            entity.Property(e => e.DescripcionDelVehiculo)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_Vehiculo");
            entity.Property(e => e.FechaDeIngresoDelInvitado)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Ingreso_del_Invitado");
            entity.Property(e => e.FechaDeSalidaDelInvitado)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Salida_del_Invitado");
            entity.Property(e => e.IdDeUsuarioAnfitrion).HasColumnName("ID_de_Usuario_Anfitrion");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PlacaDelVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Placa_del_Vehiculo");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoDeInvitacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_Invitacion");

            entity.HasOne(d => d.IdDeUsuarioAnfitrionNavigation).WithMany(p => p.Invitados).HasForeignKey(d => d.IdDeUsuarioAnfitrion);
        });

        modelBuilder.Entity<ListaNegraDeVehiculo>(entity =>
        {
            entity.HasKey(e => e.IdDelVehiculo);

            entity.ToTable("Lista_Negra_de_Vehiculos");

            entity.Property(e => e.IdDelVehiculo).HasColumnName("ID_del_Vehiculo");
            entity.Property(e => e.DescripcionDelVehiculo)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_Vehiculo");
            entity.Property(e => e.EstadoDelVehiculo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Vehiculo");
            entity.Property(e => e.PlacaDelVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Placa_del_Vehiculo");
        });

        modelBuilder.Entity<Mantenimiento>(entity =>
        {
            entity.HasKey(e => e.IdDeMantenimiento);

            entity.Property(e => e.IdDeMantenimiento).HasColumnName("ID_de_Mantenimiento");
            entity.Property(e => e.DescripcionDeLasAccionesRealizadas)
                .HasColumnType("text")
                .HasColumnName("Descripcion_de_las_Acciones_Realizadas");
            entity.Property(e => e.DescripcionDelMantenimiento)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_Mantenimiento");
            entity.Property(e => e.EstadoDelMantenimiento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Mantenimiento");
            entity.Property(e => e.FechaYHoraDeRealizacionDelMantenimiento)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_Hora_de_Realizacion_del_Mantenimiento");
            entity.Property(e => e.FechaYHoraProgramadasDelMantenimiento)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_Hora_Programadas_del_Mantenimiento");
            entity.Property(e => e.IdDeResidenteAsociado).HasColumnName("ID_de_Residente_asociado");
            entity.Property(e => e.TipoDeMantenimiento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_Mantenimiento");

            entity.HasOne(d => d.IdDeResidenteAsociadoNavigation).WithMany(p => p.Mantenimientos).HasForeignKey(d => d.IdDeResidenteAsociado);
        });

        modelBuilder.Entity<Mascota>(entity =>
        {
            entity.HasKey(e => e.IdDeMascota);

            entity.Property(e => e.IdDeMascota).HasColumnName("ID_de_Mascota");
            entity.Property(e => e.Especie)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FechaDeRegistro)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_registro");
            entity.Property(e => e.IdDeUsuarioPropietarioDeLaMascota).HasColumnName("ID_de_Usuario_propietario_de_la_mascota");
            entity.Property(e => e.NombreDeLaMascota)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nombre_de_la_mascota");
            entity.Property(e => e.Raza)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.IdDeUsuarioPropietarioDeLaMascotaNavigation).WithMany(p => p.Mascota).HasForeignKey(d => d.IdDeUsuarioPropietarioDeLaMascota);
        });

        modelBuilder.Entity<MensajesDeEmergencium>(entity =>
        {
            entity.HasKey(e => e.IdDelMensaje);

            entity.ToTable("Mensajes_de_Emergencia");

            entity.Property(e => e.IdDelMensaje).HasColumnName("ID_del_Mensaje");
            entity.Property(e => e.ContenidoDelMensaje)
                .HasColumnType("text")
                .HasColumnName("Contenido_del_Mensaje");
            entity.Property(e => e.EstadoDelMensaje)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Mensaje");
            entity.Property(e => e.FechaYHoraDeEnvioDelMensaje)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_envio_del_mensaje");
            entity.Property(e => e.IdDeResidenteQueEnviaElMensaje).HasColumnName("ID_de_Residente_que_envia_el_mensaje");
            entity.Property(e => e.UbicacionPrecisaDelResidenteAlEnviarElMensaje)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Ubicacion_precisa_del_Residente_al_enviar_el_mensaje");

            entity.HasOne(d => d.IdDeResidenteQueEnviaElMensajeNavigation).WithMany(p => p.MensajesDeEmergencia).HasForeignKey(d => d.IdDeResidenteQueEnviaElMensaje);
        });

        modelBuilder.Entity<MensajesDelChatConCasetum>(entity =>
        {
            entity.HasKey(e => e.IdDelMensaje);

            entity.ToTable("Mensajes_del_Chat_con_Caseta");

            entity.Property(e => e.IdDelMensaje).HasColumnName("ID_del_Mensaje");
            entity.Property(e => e.ContenidoDelMensaje)
                .HasColumnType("text")
                .HasColumnName("Contenido_del_Mensaje");
            entity.Property(e => e.EstadoDelMensaje)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Mensaje");
            entity.Property(e => e.FechaYHoraDeEnvioDelMensaje)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_envio_del_mensaje");
            entity.Property(e => e.IdDeResidenteQueEnviaElMensaje).HasColumnName("ID_de_Residente_que_envia_el_mensaje");
            entity.Property(e => e.IdDeVigilanciaQueRecibeElMensaje).HasColumnName("ID_de_Vigilancia_que_recibe_el_mensaje");

            entity.HasOne(d => d.IdDeResidenteQueEnviaElMensajeNavigation).WithMany(p => p.MensajesDelChatConCasetumIdDeResidenteQueEnviaElMensajeNavigations).HasForeignKey(d => d.IdDeResidenteQueEnviaElMensaje);

            entity.HasOne(d => d.IdDeVigilanciaQueRecibeElMensajeNavigation).WithMany(p => p.MensajesDelChatConCasetumIdDeVigilanciaQueRecibeElMensajeNavigations).HasForeignKey(d => d.IdDeVigilanciaQueRecibeElMensaje);
        });

        modelBuilder.Entity<OpcionesDeRespuestum>(entity =>
        {
            entity.HasKey(e => e.IdDeOpcion);

            entity.ToTable("Opciones_de_Respuesta");

            entity.Property(e => e.IdDeOpcion).HasColumnName("ID_de_Opcion");
            entity.Property(e => e.IdDeEncuestaAsociada).HasColumnName("ID_de_Encuesta_asociada");
            entity.Property(e => e.TextoDeLaOpcion)
                .HasColumnType("text")
                .HasColumnName("Texto_de_la_Opcion");

            entity.HasOne(d => d.IdDeEncuestaAsociadaNavigation).WithMany(p => p.OpcionesDeRespuesta).HasForeignKey(d => d.IdDeEncuestaAsociada);
        });

        modelBuilder.Entity<Pago>(entity =>
        {
            entity.HasKey(e => e.IdDePago);

            entity.Property(e => e.IdDePago).HasColumnName("ID_de_Pago");
            entity.Property(e => e.EstadoDelPago)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_pago");
            entity.Property(e => e.FechaDePago)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_pago");
            entity.Property(e => e.IdDeUsuarioQueRealizaElPago).HasColumnName("ID_de_Usuario_que_realiza_el_pago");
            entity.Property(e => e.MetodoDePago)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Metodo_de_pago");
            entity.Property(e => e.MontoDelPago)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Monto_del_pago");

            entity.HasOne(d => d.IdDeUsuarioQueRealizaElPagoNavigation).WithMany(p => p.Pagos).HasForeignKey(d => d.IdDeUsuarioQueRealizaElPago);
        });

        modelBuilder.Entity<Publicacione>(entity =>
        {
            entity.HasKey(e => e.IdDePublicacion);

            entity.Property(e => e.IdDePublicacion).HasColumnName("ID_de_Publicacion");
            entity.Property(e => e.ContenidoDeLaPublicacion)
                .HasColumnType("text")
                .HasColumnName("Contenido_de_la_publicacion");
            entity.Property(e => e.EstadoDeLaPublicacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_de_la_Publicacion");
            entity.Property(e => e.FechaDePublicacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_publicacion");
            entity.Property(e => e.IdDeUsuarioQueLaPublica).HasColumnName("ID_de_Usuario_que_la_publica");
            entity.Property(e => e.NivelDeModeracion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Nivel_de_Moderacion");
            entity.Property(e => e.TipoDePublicacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_publicacion");

            entity.HasOne(d => d.IdDeUsuarioQueLaPublicaNavigation).WithMany(p => p.Publicaciones).HasForeignKey(d => d.IdDeUsuarioQueLaPublica);
        });

        modelBuilder.Entity<RecorridosDeSeguridad>(entity =>
        {
            entity.HasKey(e => e.IdDeRecorrido);

            entity.ToTable("Recorridos_de_Seguridad");

            entity.Property(e => e.IdDeRecorrido).HasColumnName("ID_de_Recorrido");
            entity.Property(e => e.DistanciaRecorrida)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Distancia_recorrida");
            entity.Property(e => e.DuracionDelRecorrido).HasColumnName("Duracion_del_recorrido");
            entity.Property(e => e.EstadoDelRecorrido)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Recorrido");
            entity.Property(e => e.FechaYHoraDeFinDelRecorrido)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_fin_del_recorrido");
            entity.Property(e => e.FechaYHoraDeInicioDelRecorrido)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_inicio_del_recorrido");
            entity.Property(e => e.IdDeGuardiaQueRealizaElRecorrido).HasColumnName("ID_de_Guardia_que_realiza_el_recorrido");
            entity.Property(e => e.PuntosDeControl)
                .HasColumnType("text")
                .HasColumnName("Puntos_de_Control");

            entity.HasOne(d => d.IdDeGuardiaQueRealizaElRecorridoNavigation).WithMany(p => p.RecorridosDeSeguridads).HasForeignKey(d => d.IdDeGuardiaQueRealizaElRecorrido);
        });

        modelBuilder.Entity<RegistroDeVoto>(entity =>
        {
            entity.HasKey(e => e.IdDeVoto);

            entity.ToTable("Registro_de_Votos");

            entity.Property(e => e.IdDeVoto).HasColumnName("ID_de_Voto");
            entity.Property(e => e.FechaYHoraDelVoto)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_del_voto");
            entity.Property(e => e.IdDeEncuestaALaQueSeRefiereElVoto).HasColumnName("ID_de_Encuesta_a_la_que_se_refiere_el_voto");
            entity.Property(e => e.IdDeOpcionSeleccionadaEnLaVotacion).HasColumnName("ID_de_Opcion_seleccionada_en_la_votacion");
            entity.Property(e => e.IdDeUsuarioQueEmiteElVoto).HasColumnName("ID_de_Usuario_que_emite_el_voto");

            entity.HasOne(d => d.IdDeEncuestaALaQueSeRefiereElVotoNavigation).WithMany(p => p.RegistroDeVotos).HasForeignKey(d => d.IdDeEncuestaALaQueSeRefiereElVoto);

            entity.HasOne(d => d.IdDeOpcionSeleccionadaEnLaVotacionNavigation).WithMany(p => p.RegistroDeVotos).HasForeignKey(d => d.IdDeOpcionSeleccionadaEnLaVotacion);

            entity.HasOne(d => d.IdDeUsuarioQueEmiteElVotoNavigation).WithMany(p => p.RegistroDeVotos).HasForeignKey(d => d.IdDeUsuarioQueEmiteElVoto);
        });

        modelBuilder.Entity<Reglamento>(entity =>
        {
            entity.HasKey(e => e.IdDeDocumento);

            entity.Property(e => e.IdDeDocumento).HasColumnName("ID_de_Documento");
            entity.Property(e => e.ArchivoDelDocumento).HasColumnName("Archivo_del_Documento");
            entity.Property(e => e.DescripcionDelDocumento)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_Documento");
            entity.Property(e => e.EstadoDelDocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Documento");
            entity.Property(e => e.FechaYHoraDeCargaDelDocumento)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_carga_del_documento");
            entity.Property(e => e.TipoDeDocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_Documento");
            entity.Property(e => e.TituloDelDocumento)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Titulo_del_Documento");
        });

        modelBuilder.Entity<ReservasDeAmenidade>(entity =>
        {
            entity.HasKey(e => e.IdDeReserva);

            entity.ToTable("Reservas_de_Amenidades");

            entity.Property(e => e.IdDeReserva).HasColumnName("ID_de_Reserva");
            entity.Property(e => e.DetallesAdicionalesDeLaReserva)
                .HasColumnType("text")
                .HasColumnName("Detalles_adicionales_de_la_reserva");
            entity.Property(e => e.EstadoDeLaReserva)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_de_la_Reserva");
            entity.Property(e => e.FechaYHoraDeAprobacionDeLaReserva)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_aprobacion_de_la_reserva");
            entity.Property(e => e.FechaYHoraDeLaReserva)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_de_la_reserva");
            entity.Property(e => e.IdDeAmenidadReservada).HasColumnName("ID_de_Amenidad_reservada");
            entity.Property(e => e.IdDeUsuarioQueRealizaLaReserva).HasColumnName("ID_de_Usuario_que_realiza_la_reserva");

            entity.HasOne(d => d.IdDeAmenidadReservadaNavigation).WithMany(p => p.ReservasDeAmenidades).HasForeignKey(d => d.IdDeAmenidadReservada);

            entity.HasOne(d => d.IdDeUsuarioQueRealizaLaReservaNavigation).WithMany(p => p.ReservasDeAmenidades).HasForeignKey(d => d.IdDeUsuarioQueRealizaLaReserva);
        });

        modelBuilder.Entity<ServiciosProgramado>(entity =>
        {
            entity.HasKey(e => e.IdDeServicio);

            entity.ToTable("Servicios_Programados");

            entity.Property(e => e.IdDeServicio).HasColumnName("ID_de_Servicio");
            entity.Property(e => e.DescripcionDelServicio)
                .HasColumnType("text")
                .HasColumnName("Descripcion_del_Servicio");
            entity.Property(e => e.EstadoDelServicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Estado_del_Servicio");
            entity.Property(e => e.FechaYHoraProgramadasParaElServicio)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_y_hora_programadas_para_el_servicio");
            entity.Property(e => e.IdDeResidenteAsociado).HasColumnName("ID_de_Residente_asociado");
            entity.Property(e => e.TipoDeServicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_Servicio");

            entity.HasOne(d => d.IdDeResidenteAsociadoNavigation).WithMany(p => p.ServiciosProgramados).HasForeignKey(d => d.IdDeResidenteAsociado);
        });

        modelBuilder.Entity<Transaccione>(entity =>
        {
            entity.HasKey(e => e.IdDeTransaccion);

            entity.Property(e => e.IdDeTransaccion).HasColumnName("ID_de_Transaccion");
            entity.Property(e => e.DescripcionDeLaTransaccion)
                .HasColumnType("text")
                .HasColumnName("Descripcion_de_la_transaccion");
            entity.Property(e => e.Estado)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FechaDeLaTransaccion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_la_transaccion");
            entity.Property(e => e.IdDeUsuarioQueRealizaLaTransaccion).HasColumnName("ID_de_Usuario_que_realiza_la_transaccion");
            entity.Property(e => e.MontoDeLaTransaccion)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Monto_de_la_transaccion");
            entity.Property(e => e.TipoDeTransaccion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Tipo_de_Transaccion");

            entity.HasOne(d => d.IdDeUsuarioQueRealizaLaTransaccionNavigation).WithMany(p => p.Transacciones).HasForeignKey(d => d.IdDeUsuarioQueRealizaLaTransaccion);
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdDeUsuario);

            entity.Property(e => e.IdDeUsuario).HasColumnName("ID_de_Usuario");
            entity.Property(e => e.Apellido)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Contrasena)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CorreoElectronico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Correo_electronico");
            entity.Property(e => e.FechaDeCreacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_creacion");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Rol)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UltimaFechaDeInicioDeSesion)
                .HasColumnType("datetime")
                .HasColumnName("Ultima_fecha_de_inicio_de_sesion");
        });

        modelBuilder.Entity<UsuariosDomicilio>(entity =>
        {
            entity.HasKey(e => e.IdDeRelacion);

            entity.ToTable("Usuarios_Domicilios");

            entity.Property(e => e.IdDeRelacion).HasColumnName("ID_de_Relacion");
            entity.Property(e => e.FechaDeAsociacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_de_Asociacion");
            entity.Property(e => e.IdDeDomicilio).HasColumnName("ID_de_Domicilio");
            entity.Property(e => e.IdDeUsuario).HasColumnName("ID_de_Usuario");

            entity.HasOne(d => d.IdDeDomicilioNavigation).WithMany(p => p.UsuariosDomicilios).HasForeignKey(d => d.IdDeDomicilio);

            entity.HasOne(d => d.IdDeUsuarioNavigation).WithMany(p => p.UsuariosDomicilios).HasForeignKey(d => d.IdDeUsuario);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}